#Область ПрограммныйИнтерфейс

#Область Проведение

#КонецОбласти

#КонецОбласти 


#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.БезвозмезднаяПередача.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
КонецПроцедуры

// Добавляет команду создания документа.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	ТаблицаЗначений, Неопределено - сформированные команды для вывода в подменю.
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
		
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ПечатьТранспортнойНакладной";
	//КомандаПечати.Представление = НСтр("ru = 'Какая-то транспортная накладная'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТранспортнойНакладной") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ПечатьТранспортнойНакладной",
	//		НСтр("ru = 'Какая-то транспортная накладная'"),
	//		СформироватьПечатнуюФормуТранспортнойНакладной(МассивОбъектов));
	//	
	//КонецЕсли;
		
КонецПроцедуры

Функция ДополнительныеДокументыПечати(МассивДокументов) Экспорт
	
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти 

#Область ТекстыЗапросов


#КонецОбласти

#Область СлужебныеПроцедурыИФункции




#КонецОбласти


#Область Брокер

Функция ВыгружаемыеРеквизиты() Экспорт

	Результат = Новый Массив();
	
	Результат.Добавить("Номер");
	Результат.Добавить("Дата");
	Результат.Добавить("Комментарий");
	
	Возврат Результат;	
	
КонецФункции

Функция ДанныеОбъектаКВыгрузке(Объект) Экспорт
	
	// Упрощено чтоб не изобредать КД или БитАдаптер
	
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	ДанныеОбъекта = ОбменСообщениямиПодготовкаСообщенияСервер.ШаблонСообщенияДляПреобразованияОбъектаВJSON();
    ДанныеОбъекта.ПолноеИмяОбъектаМетаданных = ПолноеИмя;
	
	ВыгружаемыеРеквизиты = ВыгружаемыеРеквизиты();
	Реквизиты = Новый Структура();
	Для Каждого Реквизит Из ВыгружаемыеРеквизиты Цикл
		Реквизиты.Вставить(Реквизит);		
	КонецЦикла;
		
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Статус = СтатусыДокументовВызовСервера.СтатусЗаказаКлиента(Объект);
		ВыгружаемыеСтатусы = Перечисления.СтатусыЗаказовКлиента.ВыгружаемыеСтатусы();
		Если Статус = Неопределено
			Или ВыгружаемыеСтатусы.Найти(Статус) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаКВыгрузкеДанных(ВыгружаемыеРеквизиты);
		
		Запрос.УстановитьПараметр("Ссылка", Объект);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Реквизиты, ВыборкаДетальныеЗаписи);	
		КонецЕсли;
		
		Реквизиты.Вставить("Идентификатор", Объект.УникальныйИдентификатор());
		
	Иначе
		
		Статус = СтатусыДокументовВызовСервера.СтатусЗаказаКлиента(Объект.Ссылка);
		ВыгружаемыеСтатусы = Перечисления.СтатусыЗаказовКлиента.ВыгружаемыеСтатусы();
		Если Статус = Неопределено
			Или ВыгружаемыеСтатусы.Найти(Статус) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
 
		ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
		Реквизиты.Вставить("Идентификатор", Объект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
	ДанныеОбъекта.Реквизиты = Реквизиты;
	
	Возврат ДанныеОбъекта;	
	
КонецФункции

Функция ТекстЗапросаКВыгрузкеДанных(ВыгружаемыеРеквизиты)
	
	Текст = 
	"ВЫБРАТЬ
	|	%ВыбираемыеРеквизиты%
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента";
	
	ДополнениеЗапроса = "";
	ЭтоПервыйЭлемент = Истина;
	Для Каждого Реквизит Из ВыгружаемыеРеквизиты Цикл
		
		Если Не ЭтоПервыйЭлемент Тогда
			ДополнениеЗапроса = ДополнениеЗапроса + ",";	
		КонецЕсли;
		
		ДополнениеЗапроса = ДополнениеЗапроса + "ЗаказКлиента." + Реквизит;
		ЭтоПервыйЭлемент = Ложь;

	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "%ВыбираемыеРеквизиты%", ДополнениеЗапроса);
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

